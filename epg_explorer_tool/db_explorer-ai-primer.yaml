# Updated: 2025-09-28

db_tools:
  explorer:
    description: |
      The `db_explorer.rs` binary is a utility for inspecting and exporting Plex’s SQLite database
      (`plex_epg.db`). It lets you quickly view table structures, dump rows, and test queries before
      wiring them into the app.
    usage:
      - Run:
        powershell: |
          cargo run --bin db_explorer <table_name> [limit]
        examples:
          - cargo run --bin db_explorer metadata_items 10
          - cargo run --bin db_explorer media_items 10
          - cargo run --bin db_explorer media_subscriptions 20
      - `<table_name>`: table to inspect
      - `[limit]`: optional row count
    output:
      - Table name
      - Column names
      - Row values (NULLs, text, numbers, JSON-ish fields, etc.)
    notes:
      - Uses `rusqlite` to query `plex_epg.db`.
      - Useful for validating column presence and contents (e.g., `mi.extra_data`, `m.year`).

database:
  plex_epg:
    key_tables:
      metadata_items:
        purpose: "Stores media (movies/shows/seasons/episodes)."
        important_fields:
          - id
          - metadata_type (1=Movie, 2=Show, 3=Season, 4=Episode)
          - title
          - summary
          - user_thumb_url (new) / thumb_url (legacy)
          - originally_available_at
          - year
          - added_at
          - tags_genre (pipe-delimited)
      media_items:
        purpose: "Carries airing info for EPG rows and the per-row channel metadata blob."
        important_fields:
          - metadata_item_id (FK → metadata_items.id)
          - begins_at (UNIX seconds; schedule start)
          - ends_at (UNIX seconds; schedule end)
          - extra_data (JSON-like string)
            keys_of_interest:
              - "at:channelCallSign"  (preferred short channel)
              - "at:channelTitle"     (often like '006 ITV2', we trim prefix)
              - "at:channelThumb"     (logo URL)
              - "at:channelVcn"       (virtual channel number)
              - "at:gridKey"
              - "at:protocol"

app_query_contract:
  # What the main app expects to SELECT
  select_columns:
    - m.title
    - m.user_thumb_url OR m.thumb_url (fallback)
    - mi.begins_at
    - m.year
    - mi.extra_data
  ordering:
    - ORDER BY COALESCE(mi.begins_at, m.added_at) ASC
  limit:
    - The SQL uses "LIMIT ?1". For warm-up we pass [i64::MAX] to emulate no-limit.
  channel_extraction:
    - Parse from mi.extra_data:
      * Prefer "at:channelCallSign"; fallback to "at:channelTitle".
      * If channelTitle like "006 ITV2", trim leading vcn to "ITV2".
    - If extra_data missing, fallback to URL hostname (best-effort).

workflow:
  - Use `db_explorer` to confirm schema/columns.
  - Validate that `mi.extra_data` is populated and contains the channel keys listed above.
  - Once verified, ensure the main SQL selects `mi.extra_data` and parse channel accordingly.
  - Re-run app and confirm cards display: "Title (YYYY)", channel, "HH:MM".

reminders:
  - Always pass a parameter for LIMIT (?1), even if set to i64::MAX.
  - Avoid blocking the UI; heavy I/O and networking must stay in background threads.
  - We do not deserialize extra_data with serde_json in the hot path; a tiny substring parser suffices for the keys we need.
