# Updated: 2025-09-28

human_goals:
  description: Create a Plex-browser–style interface for Plex EPG data, focused first on "to be aired" films.
  requirements:
    - Group films by day-of-week the film will air, with a horizontal day divider between groups.
    - Each grid card shows: title, year, channel, and start time.
    - A right-hand detail panel shows: bigger poster, title/year/channel/time, description, genre(s), IMDb review.
    - Sorting/filters: by genre.
    - Day window selector: 2 days (default), 7 days, 14 days, All.
    - Cross-reference EPG films with local filesystem libraries to dim/hide films already owned.

ways_of_working:
  - Provide code as whole-function replacements (drop-in), not line-by-line patches.
  - Make small, incremental changes toward the goals above.
  - Never block the UI thread; keep frames moving (ctx.request_repaint).

project_status:
  repo_area: src/app/mod.rs (main UI + data flow)
  high_level_flow:
    1: App starts (eframe/egui).
    2: Poster preparation "warm-up": copy EPG DB if needed; scan EPG for (title, poster_url, begins_at, year, channel); ensure poster cache on disk.
    3: Cache-only prefetch builds textures from disk for fast initial grid render (lazy uploads + prewarm).
    4: Main UI shows grouped-by-day grid (with early grid allowed while prefetch completes).
  current_focus: Startup smoothness and early responsiveness; prep posters and cache up-front; keep UI interactive while assets load.

architecture:
  threads_and_channels:
    poster_prep_thread:
      purpose: Phase 2+3 warm-up. Emits status + final manifest.
      tx_type: PrepMsg { Info(String) | Done(Vec<(title,url,key,begins_at?,year?,channel?)>) | Error(String) } via mpsc channel.
    prefetch_workers:
      purpose: Ensure poster bytes exist on disk (cache hit or network fallback). No GPU work off-thread.
      concurrency: WORKER_COUNT (const, default 8).
      result_channel: PrefetchDone { row_idx, key, result<PathBuf, String> }.
    ui_thread:
      responsibilities:
        - drives frames (ctx.request_repaint).
        - polls poster_prep channel (poll_prep).
        - when manifest arrives, starts prefetch (start_prefetch).
        - drains completions in small batches per frame (poll_prefetch_done).
        - lazily uploads textures when cards are about to be shown (try_lazy_upload_row) + prewarm_first_screen.

phases:
  boot_phase_enum: [Starting, CheckingNew, Caching, Ready]
  phase_enum (optional UI status): [Prefetching, Ready]

data_models:
  PosterRow:
    fields:
      - title: String
      - url: String
      - key: String                # cache key from URL
      - airing: Option<SystemTime> # from media_items.begins_at (UNIX seconds)
      - year: Option<i32>          # from metadata_items.year
      - channel: Option<String>    # parsed from media_items.extra_data (at:channelCallSign/title)
      - path: Option<PathBuf>      # cached image path on disk
      - tex: Option<TextureHandle> # GPU texture (UI thread only)
      - state: PosterState { Pending|Cached|Ready|Failed }
  DayRange: { Two|Seven|Fourteen|All } with .limit() for view window.

db_fields_and_sql:
  - Use JOIN between metadata_items (movies: metadata_type=1) and media_items.
  - Selected columns: m.title, m.user_thumb_url (or m.thumb_url), mi.begins_at, m.year, mi.extra_data
  - ORDER BY COALESCE(mi.begins_at, m.added_at) ASC
  - LIMIT ?1 → pass [i64::MAX] to emulate no-limit during warm-up.
  - Channel is extracted from media_items.extra_data JSON-like string keys:
      * "at:channelCallSign" preferred
      * fallback "at:channelTitle"
    If missing, fallback to host-based heuristic from URL (best-effort).

ui:
  framework: egui (eframe).
  screens:
    splash_prep:
      - shows: static title "Poster preparation…", spinner, status line, cache path.
      - calm, non-blocking while warm-up runs.
    main_grid:
      top_bar:
        - Day window selector (2d/7d/14d/All) – view-only (no rescans).
        - (Future) genre filter and sort controls.
      grid:
        - Grouped by day using begins_at bucket; divider label "Friday 3rd Sep".
        - Card shows:
            Title (YYYY)
            <Channel>
            <HH:MM>   # UTC time for now
        - Early grid allowed (SHOW_GRID_EARLY=true) once MIN_READY_BEFORE_GRID posters are ready.
      performance:
        - Lazy texture upload during layout (try_lazy_upload_row) with MAX_UPLOADS_PER_FRAME cap.
        - prewarm_first_screen uploads some textures right after prep completes.
        - progress and completion batching via MAX_DONE_PER_FRAME to maintain frame pacing.

caching:
  dir: .pex_cache under repo (see cache::cache_dir()).
  policy:
    - Prefer cached resized JPEG (RESIZE_MAX_W x quality).
    - If missing, download resize; fallback to original if resize fails.
    - Warm-up ensures presence-on-disk; UI maps cache → GPU lazily.

configuration:
  file: config.json (load_config()).
  keys: plex_db_local (required), plex_db_source (optional for daily copy).

constants_and_tunables:
  WORKER_COUNT: 8
  RESIZE_MAX_W: 500
  RESIZE_QUALITY: 75
  SHOW_GRID_EARLY: true
  MIN_READY_BEFORE_GRID: 24
  STATUS_EMIT_EVERY_MS: 120
  MAX_DONE_PER_FRAME: 12
  MAX_UPLOADS_PER_FRAME: 4
  PREWARM_UPLOADS: 12
  DIAG_FAKE_STARTUP: false

known_gotchas:
  - SQL contains "LIMIT ?1"; always pass a parameter (use [i64::MAX] in warm-up to emulate no-limit).
  - Channel: `media_items.extra_data` is a JSON-like string; we use a tiny substring parser to avoid serde_json in hot path.
  - All GPU texture creation must occur on the UI thread.
  - Keep prefetch/downloads off the UI thread. Do not block the UI with file or network I/O.
  - Dead code cleanup: old `StartupMsg` and unused `Phase` variants removed; avoid reintroducing them.

near_term_todos:
  - Right-side detail panel: selected card details, larger poster, description (metadata_items.summary), genres (tags_genre), IMDb.
  - Genre filter: ingest `tags_genre` and filter UI.
  - Filesystem cross-reference:
      * configurable library roots
      * normalize titles/year (e.g., "Movie (Year)") → match against filenames
      * mark PosterRow as owned (dim card or hide via filter)
  - (Optional) Persist small manifest (title/year/key/channel/begins_at) to disk to skip DB open on cold boot.

dev_guidelines:
  code_changes:
    - Submit whole-function replacements for start_poster_prep, poll_prep, start_prefetch, poll_prefetch_done, update, etc.
    - Keep changes incremental; avoid broad refactors unless necessary.
  robustness:
    - Never block UI thread with file/network I/O.
    - Throttle status updates to ~8/s (STATUS_EMIT_EVERY_MS).
    - Small sleeps/yields inside heavy loops (copy_with_progress, warm-up loop) to share time slice.

build_run:
  command: cargo run
  platform: Windows (msvc); network shares supported (copy_with_progress uses large buffered chunks + yields).
