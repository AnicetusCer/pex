version: 1
updated: 2025-10-04

human:
  goals:
    - Keep the app snappy: fast first paint, smooth scrolling, minimal blocking on the UI thread.
    - Make pragmatic, incremental improvements without breaking working flows.
    - Favor small patches that compile and pass clippy over big refactors.
    - Keep Windows users happy (paths, perf, default config).
  ways_of_working:
    - Provide the human with full function replaces if the function is resonably small (< 50 lines).
    - When providing targeted code chanegs give the human the context of where to put the code.  
    - Run: "cargo run" often; keep it compiling between changes.
    - Lint: "cargo clippy --all-targets --all-features -- -W clippy::all -W clippy::nursery".
    - Prefer focused diffs; avoid churn and needless renames.
    - Keep existing behavior unless there’s a clear UX win.
    - If you must add types, prefer local type aliases (e.g., "type WorkItem = ...") over new modules.

project:
  purpose: >
    EGUI app that scans a Plex EPG DB, builds a poster list, ensures cached “small” posters exist,
    and lazily uploads textures to render a grouped grid (fast perceived startup).
  binaries:
    - pex (GUI)
    - db_explorer (CLI helper in epg_explorer_tool/)
  layout: |
    src/
      app/
        mod.rs         # app state + orchestration + egui App impl
        cache.rs       # cache dir, url_to_cache_key, download & resized-store, raw RGBA loader
        prep.rs        # read-only DB scan -> Vec<PrepItem>, optional daily copy
        prefs.rs       # load/save UI prefs & hotset manifest
        utils.rs       # day buckets, time formatting, title normalization, genre parsing, channel humanizer
        gfx.rs         # texture upload helpers
        filters.rs     # (legacy) genre helpers; keep minimal
        types.rs       # enums & re-exported message/type aliases for app
        owned.rs       # background "owned" scan and application of flags
        prefetch.rs    # worker pool to fetch/resize posters
        detail.rs      # right-side details panel (snapped width)
        ui/
          mod.rs       # splash + UI composition
          topbar.rs    # range/search/sort/owned controls & channel filter popup
          grid.rs      # grouped poster grid (fixed rows; centered; clipped labels)
      config.rs        # AppConfig + load_config()
    epg_explorer_tool/
      db_explorer.rs   # CLI to inspect DB tables
    Cargo.toml

runtime_model:
  threads_channels:
    - UI thread: egui paint/input, status updates; lazy texture uploads.
    - Prep thread: app::prep::spawn_poster_prep(tx).
    - Owned-scan thread: DFS over library_roots → normalized "title:year" keys.
    - Prefetch pool (N = worker_count_ui): shared reqwest::blocking::Client (keep-alive/HTTP2).
  messages:
    - PrepMsg:
        - Info(String)
        - Done(Vec<PrepItem>)
        - Error(String)
    - OwnedMsg:
        - Info(String)
        - Done(HashSet<String>)   # normalized "title:year"
        - Error(String)
    - WorkItem: "(row_idx, key, url, cached_path_opt)"
    - PrefetchDone: "{ row_idx, result: Result<PathBuf, String> }"
  prep_item_schema:
    - title: String
    - url: String
    - base_cache_key: String
    - begins_at_unix: Option<i64>
    - year: Option<i32>
    - tags_genre: Option<String>
    - channel: Option<String>  # from media_items.extra_data (call sign/title)

flow:
  first_frame:
    - load_prefs() from "<cache_dir>/ui_prefs.txt"
    - start_owned_scan()
    - start_poster_prep()
    - show splash with status heartbeat
  prep_done_in_ui:
    - Map PrepItem → PosterRow
    - Derive small_key = base_key + "__s"
    - Try find_any_by_key(small_key) to attach cached path
    - Load "hotset.txt", attach known paths, prewarm textures
    - apply_owned_flags() if owned keys ready
    - start_prefetch(ctx)
    - prewarm_first_screen(ctx)
  prefetch:
    - Queue “near-term” shows first (next 2 days), then the rest
    - Workers:
        - download_and_store_resized_with_client(width=320, quality=75) → "<key>.jpg"
        - Fallback to download_and_store (original size)
    - UI lazily uploads textures (throttled by MAX_UPLOADS_PER_FRAME)

config:
  file: config.json
  keys:
    - plex_db_local: "Path to local plex EPG sqlite"
    - plex_db_source: "Optional source DB to daily copy from"
    - cache_dir: "Poster/prefs cache root"
    - library_roots: "Dirs to scan for 'owned' titles"
  persistence:
    prefs_path: "<cache_dir>/ui_prefs.txt"
    prefs_fields:
      - day_range: "2|4|5|7|14"
      - search: "<string>"
      - sort_key: "time|title|channel|genre"
      - sort_desc: "0|1"
      - poster_w: "<f32 120..220>"
      - workers: "<usize 1..32>"
      - hide_owned: "0|1"
      - dim_owned: "0|1"
      - dim_strength: "<0.10..0.90>"
      - channels: "CSV of included channels"
    hotset_path: "<cache_dir>/hotset.txt"
    hotset_line: "<cache_key>\t<abs_path>"
  cache_keys:
    - base_key: "derived from URL (e.g., md5)"
    - small_key: "base_key + '__s'"
    - files:
        - "<key>.jpg"  # resized small
        - "<key>.rgba" # raw RGBA (loader supports)

ui:
  filters:
    - day_range: [2, 4, 5, 7, 14] relative to now (day buckets)
    - search: "substring on title (lowercased)"
    - channel_filter: "include-only; configured via popup; saved as CSV in prefs"
    - owned: { hide_owned: bool, dim_owned: bool, dim_strength: 0.10..0.90 }
  sort:
    - key: [time, title, channel, genre]
    - desc: togglable
  layout:
    grid:
      card:
        width: "poster_width_ui (120..220; default 140)"
        height: "card_w * 1.5 + 56 (poster + 3-line label)"
        selection: "yellow stroke on selected"
        label: "clipped to text rect; never bleeds into neighbors; title(year) / humanized channel / HH:MM UTC"
      spacing:
        # Horizontal spacing used for column math & panel snapping; keep single source of truth.
        H_SPACING: 2.0
        V_SPACING: 10.0
      behavior:
        - "Columns = floor((available + H_SPACING) / (card_w + H_SPACING)), min 1"
        - "Center grid by adding left pad; gaps remain tight"
        - "Fixed-size cards; force ui.end_row() at column boundary → no diagonal rows"
        - "Bounded lazy texture uploads per frame"
    details_panel:
      side: "right"
      width: "resizable; snapped to multiples of (poster_width_ui + H_SPACING)"
      min_max: "min 260; max clamp to ~45% of screen and snap; prevents covering grid"
      content: "poster preview, title(year), channel+time line, owned flag, genres"
      note: "current width stored in-memory (field: detail_panel_width); snapping keeps grid aligned"

perf:
  constants:
    - WORKER_COUNT = 16 (default into UI)
    - RESIZE_MAX_W = 320
    - RESIZE_QUALITY = 75
    - SHOW_GRID_EARLY = true
    - MIN_READY_BEFORE_GRID = 24
    - STATUS_EMIT_EVERY_MS = 120
    - MAX_DONE_PER_FRAME = 12
    - MAX_UPLOADS_PER_FRAME = 4
    - PREWARM_UPLOADS = 24
  notes:
    - One shared blocking HTTP client (keep-alive + HTTP/2).
    - Prioritize near-term airings when queuing.
    - Throttle GPU uploads per frame.

style_and_clippy:
  enforce:
    - Prefer "Self::" inside impls.
    - Take "&Path" (not "&PathBuf") in helpers.
    - Use ".is_some_and", "map_or_else" where it improves clarity.
  allowed:
    - "clippy::missing_const_for_fn" for tiny mutators (e.g., mark_dirty()).
    - "clippy::too_long_first_doc_paragraph" in legacy docs (or split with a blank line).
  gotchas:
    - Do not reintroduce removed fields (e.g., first_ready_at).
    - Keep: "type WorkItem = (usize, String, String, Option<PathBuf>);".

troubleshooting:
  - duplicate [[bin]] name/path: "One block per bin in Cargo.toml."
  - unresolved pex_new: "Use pex::app::PexApp or import PexApp."
  - missing Path: "add use std::path::Path."
  - function defined multiple times: "deduplicate helpers (e.g., civil_from_days)."
  - splash never ends:
      - ensure plex_db_local exists and is valid sqlite
      - if using plex_db_source, verify path and last-sync marker behavior
      - watch PrepMsg::Info / OwnedMsg::Info logs for progress

open_todos:
  - Persist detail_panel_width in prefs (read/write key e.g., "detail_w") so the snap width survives restarts.
  - Use a single spacing constant across grid & detail snap (prefer ui/grid.rs::H_SPACING; remove duplicate GUTTER_X).
  - Consider optional per-row time labels (local timezone toggle) once config is ready.
