version: 3
updated: 2025-10-11

human:
  goals:
    - Keep the app snappy: fast first paint, smooth scrolling, minimal blocking on the UI thread.
    - Make pragmatic, incremental improvements without breaking working flows.
  ways_of_working:
    - Provide the human with full function replacements; the human will search by function name.
    - When providing targeted code changes, give the context of where to put the code (file + approx line, e.g., “above line 120”).
    - Run: "cargo run" often; keep it compiling between changes.
    - Lint: "cargo clippy --all-targets --all-features -- -W clippy::all -W clippy::nursery".
    - Cleanup: when making changes, remove/inline any old references and dead helpers.
    - Advice: suggest the *best* method or API to use (and call out removed/deprecated ones).

project:
  purpose: >
    Desktop viewer and triage tool for the Plex EPG SQLite database. Pex boots quickly into an egui desktop UI,
    streams programme rows into a poster-first grid, highlights owned titles (with HD-upgrade hints),
    pulls channel badges/icons, and exposes a detail pane with synopsis, airing schedule, and on-demand TMDb ratings.
    Posters are cached & resized locally, owned status is derived from library scans, and the UX stays snappy through
    aggressive background prep/prefetch stages.
  feature_highlights:
    - "Splash -> poster prep -> grid transition designed to keep first paint under ~1s on warm cache."
    - "Multi-stage caching: poster resize/store, channel icon prefetch, owned sidecars mirrored from Plex."
    - "Detail panel shows channel badge, day+time stamp (`Sunday 12th 05:00 UTC`), synopsis, ratings, owned metadata."
    - "Top bar controls: day-range windows, substring search, channel/genre include filters, HD-only toggle, owned dim/hide."
    - "Advanced menu: clear/prune caches, refresh owned scan, backup/restore UI prefs."
    - "DVR awareness: scheduled recordings highlighted with a REC badge sourced from Plex's library database."
  binaries:
    - pex (GUI)
    - db_explorer (CLI helper in epg_explorer_tool/)
    - library_db_explorer (CLI helper for Plex library DB + DVR metadata)
  layout: |
    src/
      app/
        mod.rs         # app state + orchestration + egui App impl
        cache.rs       # cache dir helpers, poster/icon download, owned sidecars
        prep.rs        # read-only DB scan -> Vec<PrepItem>, optional daily copy
        prefs.rs       # load/save UI prefs & hotset manifest
        utils.rs       # date/time formatting, normalization helpers, channel inference
        gfx.rs         # texture upload helpers
        filters.rs     # day-window filtering, search, channel/genre include filters, sorting & grouping
        types.rs       # shared structs/enums for app messages and rows
        owned/
          mod.rs           # orchestrates owned scan workers
          owned_scan_plex.rs # Plex library DB owned detection + sidecar persistence
        scheduled.rs    # loads DVR scheduled recordings from media_grabs/media_subscriptions
        prefetch.rs    # worker pool to fetch/resize posters
        detail.rs      # right-side details panel (channel icon, ratings, owned metadata)
        ui/
          mod.rs     # splash + UI composition
          topbar.rs  # range/search/sort controls & advanced popup
          grid.rs    # grouped poster grid (badges, lazy texture uploads)
      assets/PEX.ico  # app icon embedded at compile time
      config.rs        # AppConfig + load_config()
      bin/             # aux CLIs (when enabled)
    epg_explorer_tool/
      db_explorer.rs   # CLI to inspect DB tables
      library_db_explorer.rs # CLI to inspect Plex library DB (owned + DVR state)
    Cargo.toml
  tips_for_new_work:
    - "Start from `src/app/mod.rs` to understand app state transitions; it wires prep, owned, filters, and UI."
    - "`PosterRow` carries precomputed `owned_key` + `broadcast_hd`; prefer using those instead of recomputing."
    - "Any new UI lives under `src/app/ui/`; keep expensive work off the paint path and return early when splash is active."
    - "Reuse helpers in `utils.rs` for date/ordinal logic and channel normalization."
    - "When touching caching logic, review `cache.rs` + `prefs.rs` to keep sidecars/prefs consistent."
    - "Scheduled DVR badges are loaded via `app::scheduled`; reuse `ScheduledIndex` helpers instead of duplicating SQL."
  platforms:
    windows:
      notes:
        - Works out of the box (winit + wgpu).
        - TLS via rustls; no OpenSSL/native-tls required.
    wsl_linux:
      notes:
        - Requires an X/Wayland server on Windows host.
        - Ensure DISPLAY/WAYLAND_DISPLAY exported by the compositor.
    linux:
      notes:
        - Install SQLite dev headers (e.g., libsqlite3-dev/sqlite-devel).

networking:
  http_client: reqwest 0.12 (blocking) with rustls
  builder_guidance:
    do:
      - ".user_agent(\"pex/prefetch\")"
      - ".timeout(Duration::from_secs(20))"
      - ".http2_keep_alive_while_idle(true)"
      - ".pool_max_idle_per_host(16)"
    avoid_removed_apis:
      - ".http2_adaptive_window(...)"  # removed in reqwest 0.12
  rationale: >
    Uses a single shared blocking client for the prefetch pool to maximize socket reuse and minimize per-request setup.

runtime_model:
  threads_channels:
    - UI thread: egui paint/input, status updates; lazy texture uploads (GPU creation on UI only).
    - Prep thread: app::prep::spawn_poster_prep(tx).
    - Owned-scan thread: reads Plex library metadata, hydrates owned_all / owned_hd sidecars, and records modified timestamps.
    - Prefetch pool (N = worker_count_ui): shared reqwest::blocking::Client (keep-alive + HTTP/2 via rustls).
    - Scheduled loader: synchronous read of Plex library DB (`app::scheduled::load_scheduled_index`) triggered after prep and when refreshing owned caches.
  messages:
    - PrepMsg:
        - Info(String)
        - Done(Vec<PrepItem>)
        - Error(String)
    - OwnedMsg:
        - Info(String)
        - Done { keys: HashSet<String>, modified: HashMap<String, Option<u64>> }
        - Error(String)
    - WorkItem: "(row_idx, key, url, cached_path_opt)"
    - PrefetchDone: "{ row_idx, result: Result<PathBuf, String> }"
  prep_item_schema:
    - title: String
    - thumb_url: String
    - key: String (md5 of URL)
    - begins_at_unix: Option<i64>
    - year: Option<i32>
    - tags_genre: Option<String>
    - channel_call_sign: Option<String>
    - channel_title: Option<String>  # e.g. "006 ITV2"
    - channel_thumb: Option<String>  # badge URL
    - guid: Option<String>
    - summary: Option<String>
    - audience_rating: Option<f32>
    - critic_rating: Option<f32>

flow:
  first_frame:
    - load_prefs() from "<cache_dir>/ui_prefs.txt"
    - Load owned sidecars (owned_all/owned_hd) and modified timestamps if present
    - start_owned_scan() (mirrors the Plex library DB and refreshes owned sidecars)
    - start_poster_prep()
    - Show splash with status heartbeat
  prep_done_in_ui:
    - Map PrepItem → PosterRow (with channel badge metadata)
    - Derive small_key = base_key + "__s"
    - Try find_any_by_key(small_key) to attach cached path
    - Load "hotset.txt", attach known paths, prewarm textures
    - Kick channel icon prefetch for unseen URLs
    - refresh_scheduled_index() to merge DVR metadata from Plex library DB
    - apply_owned_flags() if owned keys ready (sets owned flags + recorded dates)
    - start_prefetch(ctx)
    - prewarm_first_screen(ctx)
  prefetch:
    - Queue “near-term” shows first (next 2 days), then the rest
    - Workers:
        - download_and_store_resized_with_client(width=320, quality=75) → "<key>.jpg"
        - Fallback to download_and_store (original size)
    - UI lazily uploads textures (bounded per-frame by MAX_UPLOADS_PER_FRAME)

config:
  file: config.json
  keys:
    - plex_epg_db_source: "Optional source DB copied into db/plex_epg.db once per day"
    - plex_library_db_source: "Optional library DB copied into db/plex_library.db for owned + DVR state"
    - cache_dir: "Poster/owned/UI cache root"
    - tmdb_api_key: "Optional TMDb V3 key for vote-average ratings"
    - log_level: "Set tracing verbosity (trace|debug|info|warn|error)"
  persistence:
    prefs_path: "<cache_dir>/ui_prefs.txt"
    prefs_fields:
      - day_range: "2|4|5|7|14"
      - search: "<string>"
      - sort_key: "time|title|channel|genre"
      - sort_desc: "0|1"
      - poster_w: "<f32 120..220>"
      - workers: "<usize 1..32>"
      - hide_owned: "0|1"
      - dim_owned: "0|1"
      - dim_strength: "<0.10..0.90>"
      - channels: "CSV of raw channel call signs"
      - genres: "CSV of selected genres"
      - filter_hd_only: "0|1"
      - detail_w: "persisted detail panel width"
    hotset_path: "<cache_dir>/hotset.txt"
    hotset_line: "<cache_key>\t<abs_path>"
    owned_hd_sidecar: "<cache_dir>/owned_hd.txt"
    owned_all_sidecar: "<cache_dir>/owned_all.txt"
    owned_modified: "in-memory map keyed by owned key (timestamp from Plex library)"
  env_flags:
    - PEX_DISABLE_PREFETCH=1
    - RUST_LOG=info
database:
  files:
    - plex_epg.db: "Primary SQLite the app reads (metadata_items, media_items, assets, etc.)"
    - plex_epg.db-shm / -wal: "SQLite WAL files; safe to leave in place during read-only access"
    - plex_library.db: "Mirrored Plex library database used for owned detection + DVR schedule (media_grabs, media_subscriptions, metadata_subscription_desired_items)"
  schema_entry_points:
    - "app::prep::SQL_POSTERS_USER_THUMB (metadata_items + media_items join) for poster rows"
    - "app::prep::parse_channel_meta(extra_data) extracts `at:channelCallSign/title/thumb` from JSON-ish blob"
    - "app::scheduled::load_scheduled_index() reads media_grabs/media_subscriptions/metadata_subscription_desired_items for DVR awareness"
    - "`epg_explorer_tool/db_explorer.rs` has helper queries for debugging tables/columns"
  exploration:
    - "Iterate quickly with `cargo run --bin db_explorer -- <path-to-plex_epg.db> --help`."
    - "Use `cargo run --bin library_db_explorer -- --tables` to inspect the mirrored Plex library DB used for owned/DVR metadata."
    - "Inside the GUI, set `RUST_LOG=info` to surface prep/owned messages while validating data pulls."
    - "For ad-hoc SQL, use `sqlite3 plex_epg.db '.schema metadata_items'` (database is read-only from Pex)."

cache_keys:
  - base_key: "md5(url)"
  - small_key: "base_key + '__s'"
  - files:
      - "posters/<key>.jpg"
      - "posters/<key>.rgba"
      - "channel_icons/<hash>.png"

ui:
  filters:
    - day_range: [2, 4, 5, 7, 14]
    - search: "substring on title"
  badges:
    - "REC: row.scheduled flag set by app::scheduled::load_scheduled_index()"
    - channel filter:
        state: "selected_channels: BTreeSet<String> (raw call signs)"
        behavior:
          - "Empty set = show all"
          - "Non-empty = include only rows whose row.channel_raw matches"
        popup: "Select all/none, Clear"
    - genre filter:
        state: "selected_genres: BTreeSet<String>"
        behavior: "Empty = show all; otherwise require a match"
        popup: "Select all/none, Clear"
    - owned toggles:
        hide_owned: bool
        dim_owned: bool
        dim_strength: 0.10..0.90
        rules:
          - "Do NOT dim when a better HD is airing"
    - hd_only toggle: bool (row broadcast_hd must be true)
  sort:
    key: [time, title, channel, genre]
    desc: togglable
  layout:
    grid:
      card:
        width: "poster_width_ui (120..220; default ~140)"
        height: "card_w * 1.5 + 56"
        selection: "yellow stroke on selected"
        label lines:
          - title(year)
          - channel display label • HD
          - HH:MM UTC
        badges: "HD / HD ↑"
      behavior:
        - "Columns = floor((available + H_SPACING) / (card_w + H_SPACING)), min 1"
        - "Center grid by adding left pad"
        - "Bounded lazy texture uploads per frame"
    details_panel:
      side: "right"
      width: "snap to poster width + spacing"
      content:
        - poster preview (cached or placeholder)
        - channel icon (64px), long-title scroller, copy button
        - airing line and optional TMDb rating button
        - owned chips with recorded date
        - description and genres

hd_logic:
  broadcast_hd_inference:
    fn: "utils::infer_broadcast_hd(tags_genre: Option<&str>, channel: Option<&str>) -> bool"
  owned_hd_inference:
    stored in owned_hd.txt, recorded during owned scan (positive HD detections)
  better_hd_available_rule:
    definition: "row.owned && !owned_is_hd && broadcast_hd"
    effects:
      - "Grid shows 'HD ↑' badge"
      - "Detail panel suppresses dimming message"

icons:
  - App icon embedded from `src/assets/PEX.ico`
  - Channel icons cached under `<cache_dir>/channel_icons/<hash>.png`
  - Prefetched in background after prep so first selection doesn't block UI

ratings:
  - OMDb fetch triggered by detail panel button
  - Rating button hidden unless `tmdb_api_key` is set in config
  - Results cached in-memory per poster key for the session

advanced_controls:
  - Poster cache: clear, prune to limit, or light refresh for stale files
  - Owned cache: refresh (incremental) or clear (full reset)
  - UI prefs: backup / restore latest snapshot
  - Status readouts: Plex DB path existence, OMDb key state

open_todos:
  - Consider surfacing channel badges in the grid and channel-filter popup
  - Optional export of filtered lists (watchlist / CSV)
  - Dark/light theme toggle
  - Localization / time-zone conversions for airing times
